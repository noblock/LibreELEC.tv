diff -Nur a/driver/src/devicedrv/mali/linux/mali_memory_block_alloc.c b/driver/src/devicedrv/mali/linux/mali_memory_block_alloc.c
--- a/driver/src/devicedrv/mali/linux/mali_memory_block_alloc.c	2018-09-13 08:52:20.000000000 +0200
+++ b/driver/src/devicedrv/mali/linux/mali_memory_block_alloc.c	2018-11-17 18:49:04.033588680 +0100
@@ -309,9 +309,9 @@
 
 	list_for_each_entry(m_page, &block_mem->pfns, list) {
 		MALI_DEBUG_ASSERT(m_page->type == MALI_PAGE_NODE_BLOCK);
-		ret = vm_insert_pfn(vma, addr, _mali_page_node_get_pfn(m_page));
+		ret = vmf_insert_pfn(vma, addr, _mali_page_node_get_pfn(m_page));
 
-		if (unlikely(0 != ret)) {
+		if (unlikely(VM_FAULT_NOPAGE != ret)) {
 			return -EFAULT;
 		}
 		addr += _MALI_OSK_MALI_PAGE_SIZE;
diff -Nur a/driver/src/devicedrv/mali/linux/mali_memory_cow.c b/driver/src/devicedrv/mali/linux/mali_memory_cow.c
--- a/driver/src/devicedrv/mali/linux/mali_memory_cow.c	2018-09-13 08:52:20.000000000 +0200
+++ b/driver/src/devicedrv/mali/linux/mali_memory_cow.c	2018-11-17 18:47:36.118273221 +0100
@@ -1,11 +1,11 @@
 /*
- * Copyright (C) 2013-2016, 2018 ARM Limited. All rights reserved.
- * 
- * This program is free software and is provided to you under the terms of the GNU General Public License version 2
- * as published by the Free Software Foundation, and any use by you of this program is subject to the terms of such GNU licence.
- * 
- * A copy of the licence is included with the program, and can also be obtained from Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ * Copyright (C) 2013-2016, 2018 ARM Limited. All rights reserved.
+ * 
+ * This program is free software and is provided to you under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation, and any use by you of this program is subject to the terms of such GNU licence.
+ * 
+ * A copy of the licence is included with the program, and can also be obtained from Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  */
 #include <linux/mm.h>
 #include <linux/list.h>
@@ -532,9 +532,9 @@
 		 * flush which makes it way slower than remap_pfn_range or vm_insert_pfn.
 		ret = vm_insert_page(vma, addr, page);
 		*/
-		ret = vm_insert_pfn(vma, addr, _mali_page_node_get_pfn(m_page));
+		ret = vmf_insert_pfn(vma, addr, _mali_page_node_get_pfn(m_page));
 
-		if (unlikely(0 != ret)) {
+		if (unlikely(VM_FAULT_NOPAGE != ret)) {
 			return ret;
 		}
 		addr += _MALI_OSK_MALI_PAGE_SIZE;
@@ -569,9 +569,9 @@
 
 	list_for_each_entry(m_page, &cow->pages, list) {
 		if ((count >= offset) && (count < offset + num)) {
-			ret = vm_insert_pfn(vma, vaddr, _mali_page_node_get_pfn(m_page));
+			ret = vmf_insert_pfn(vma, vaddr, _mali_page_node_get_pfn(m_page));
 
-			if (unlikely(0 != ret)) {
+			if (unlikely(VM_FAULT_NOPAGE != ret)) {
 				if (count == offset) {
 					return _MALI_OSK_ERR_FAULT;
 				} else {
diff -Nur a/driver/src/devicedrv/mali/linux/mali_memory_os_alloc.c b/driver/src/devicedrv/mali/linux/mali_memory_os_alloc.c
--- a/driver/src/devicedrv/mali/linux/mali_memory_os_alloc.c	2018-11-17 15:59:39.000000000 +0100
+++ b/driver/src/devicedrv/mali/linux/mali_memory_os_alloc.c	2018-11-17 18:48:52.429990990 +0100
@@ -376,9 +376,9 @@
 		ret = vm_insert_page(vma, addr, page);
 		*/
 		page = m_page->page;
-		ret = vm_insert_pfn(vma, addr, page_to_pfn(page));
+		ret = vmf_insert_pfn(vma, addr, page_to_pfn(page));
 
-		if (unlikely(0 != ret)) {
+		if (unlikely(VM_FAULT_NOPAGE != ret)) {
 			return -EFAULT;
 		}
 		addr += _MALI_OSK_MALI_PAGE_SIZE;
@@ -414,11 +414,11 @@
 
 			vm_end -= _MALI_OSK_MALI_PAGE_SIZE;
 			if (mapping_page_num > 0) {
-				ret = vm_insert_pfn(vma, vm_end, page_to_pfn(m_page->page));
+				ret = vmf_insert_pfn(vma, vm_end, page_to_pfn(m_page->page));
 
-				if (unlikely(0 != ret)) {
+				if (unlikely(VM_FAULT_NOPAGE != ret)) {
 					/*will return -EBUSY If the page has already been mapped into table, but it's OK*/
-					if (-EBUSY == ret) {
+					if (VM_FAULT_NOPAGE == ret) {
 						break;
 					} else {
 						MALI_DEBUG_PRINT(1, ("OS Mem: mali_mem_os_resize_cpu_map_locked failed, ret = %d, offset is %d,page_count is %d\n",
@@ -437,9 +437,9 @@
 		list_for_each_entry(m_page, &os_mem->pages, list) {
 			if (count >= offset) {
 
-				ret = vm_insert_pfn(vma, vstart, page_to_pfn(m_page->page));
+				ret = vmf_insert_pfn(vma, vstart, page_to_pfn(m_page->page));
 
-				if (unlikely(0 != ret)) {
+				if (unlikely(VM_FAULT_NOPAGE != ret)) {
 					/*will return -EBUSY If the page has already been mapped into table, but it's OK*/
 					if (-EBUSY == ret) {
 						break;
diff -Nur a/driver/src/devicedrv/mali/linux/mali_memory_secure.c b/driver/src/devicedrv/mali/linux/mali_memory_secure.c
--- a/driver/src/devicedrv/mali/linux/mali_memory_secure.c	2018-11-17 15:59:39.000000000 +0100
+++ b/driver/src/devicedrv/mali/linux/mali_memory_secure.c	2018-11-17 18:47:04.647576221 +0100
@@ -132,9 +132,9 @@
 		MALI_DEBUG_ASSERT(0 == size % _MALI_OSK_MALI_PAGE_SIZE);
 
 		for (j = 0; j < size / _MALI_OSK_MALI_PAGE_SIZE; j++) {
-			ret = vm_insert_pfn(vma, addr, PFN_DOWN(phys));
+			ret = vmf_insert_pfn(vma, addr, PFN_DOWN(phys));
 
-			if (unlikely(0 != ret)) {
+			if (unlikely(VM_FAULT_NOPAGE != ret)) {
 				return -EFAULT;
 			}
 			addr += _MALI_OSK_MALI_PAGE_SIZE;
diff -Nur a/driver/src/devicedrv/mali/linux/mali_osk_time.c b/driver/src/devicedrv/mali/linux/mali_osk_time.c
--- a/driver/src/devicedrv/mali/linux/mali_osk_time.c	2018-09-13 08:52:20.000000000 +0200
+++ b/driver/src/devicedrv/mali/linux/mali_osk_time.c	2018-11-17 16:52:09.015528002 +0100
@@ -53,7 +53,5 @@
 
 u64 _mali_osk_boot_time_get_ns(void)
 {
-	struct timespec tsval;
-	get_monotonic_boottime(&tsval);
-	return (u64)timespec_to_ns(&tsval);
+	return (u64)ktime_to_ns(ktime_get_boottime());
 }
